/*
 * Copyright (C) 2018 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:3.2.2'
    }
}

plugins {
    id 'java'
    id 'application'
    id 'com.github.hierynomus.license' version '0.14.0'
}

mainClassName = "com.google.cloud.healthcare.imaging.dicomadapter.ExportAdapter"
run {
    // Accept command line arguments via gradle run -Dexec.args="<args>"
    args System.getProperty("exec.args", "").split()
}

buildDir = '/tmp/gradle_build/dicom_adapter/export'

sourceCompatibility = 1.11
version = '0.0.1'

compileJava {
    // Print out detailed deprecation warnings.
    options.deprecation = true
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url 'http://www.dcm4che.org/maven2/' }
}

dependencies {
    compile 'com.google.cloud:google-cloud-pubsub:1.89.0'
    compile 'com.google.guava:guava:23.6-jre'
    compile "com.beust:jcommander:1.72"
    compile 'com.google.auth:google-auth-library-oauth2-http:0.9.0'
    compile "com.google.api-client:google-api-client:1.23.0"
    compile "org.dcm4che:dcm4che-core:3.3.8"
    compile "org.dcm4che:dcm4che-net:3.3.8"
    compile project(":dicom_util")
    compile project(":util")

    testCompile "com.google.truth:truth:0.39"
    testCompile "junit:junit:4.2"
    testCompile project(path: ":util", configuration: 'testArtifacts')
    testCompile project(path: ":dicom_util", configuration: 'testArtifacts')
}

apply plugin: 'com.bmuschko.docker-java-application'
docker {
    javaApplication {
        baseImage = 'java:openjdk-8-jre'
        tag = project.findProperty("docker_tag") ?: "export_adapter"
    }
}

// TODO(b/77952311): Factor common gradle tasks between import/export adapters.
// Download open source license texts.
task downloadLicenses(type: nl.javadude.gradle.plugins.license.DownloadLicenses, overwrite: true) {
  // These libraries have their license in a non-standard location.
  licenses = specialCaseLicenses
  dependencyConfiguration = 'compile'
  doLast {
    downloadLicensesText(buildDir)
  }
}

// Download full source jar for all dependencies.
// https://stackoverflow.com/questions/16154458/how-to-copy-all-source-jars-using-gradle
task downloadSourceJars( type: Copy ) {
  def sources = configurations.runtime.resolvedConfiguration.resolvedArtifacts.collect { artifact ->
    project.dependencies.create( [
      group: artifact.moduleVersion.id.group,
      name: artifact.moduleVersion.id.name,
      version: artifact.moduleVersion.id.version,
      classifier: 'sources'
    ] )
  }
  from configurations.detachedConfiguration( sources as Dependency[] )
    .resolvedConfiguration.lenientConfiguration.getFiles( Specs.SATISFIES_ALL )
  into file( buildDir.toString() + "/docker/source" )
}

// OSS release requires license and source code to be included in Docker image.
task copySourceAndLicenseToDockerImage {
  dependsOn tasks.downloadLicenses
  dependsOn tasks.downloadSourceJars
}
dockerCopyDistResources.finalizedBy tasks.copySourceAndLicenseToDockerImage
dockerDistTar {
    instruction {'ADD license /usr/share/oss-license'}
    instruction {'ADD source /usr/share/oss-source'}
}

